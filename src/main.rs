extern crate winapi;

use std::env;
use std::fs;
use std::path::PathBuf;
use std::ptr;
use winapi::um::processthreadsapi::{GetCurrentProcess, OpenProcessToken};
use winapi::um::securitybaseapi::GetTokenInformation;
use winapi::um::winnt::{TokenElevation, HANDLE, TOKEN_ELEVATION, TOKEN_QUERY};

fn has_admin_rights() -> bool {
    unsafe {
        let mut handle: HANDLE = ptr::null_mut();
        if OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &mut handle) == 0 {
            return false;
        }

        let mut elevation: TOKEN_ELEVATION = std::mem::zeroed();
        let mut size = std::mem::size_of::<TOKEN_ELEVATION>() as u32;

        let result = GetTokenInformation(
            handle,
            TokenElevation,
            &mut elevation as *mut _ as *mut _,
            size,
            &mut size,
        );

        if result == 0 {
            return false;
        }

        elevation.TokenIsElevated != 0
    }
}

fn main() {
    if has_admin_rights() {
        println!("Already an admin.");
    } else {
        println!("Not an admin.");
        let exe_path = env::current_exe().expect("Failed to get current executable path");
        let mut new_path = PathBuf::from("D:\\Uni\\rustexploit");
        new_path.push("copied_program.exe");

        fs::copy(&exe_path, &new_path).expect("Failed to copy executable");

        println!("Executable copied to {:?}", new_path);
    }
}
